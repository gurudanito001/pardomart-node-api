// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql, sqlite, etc. based on your actual database
  url      = env("DATABASE_URL")
}

model Verification {
    mobileNumber  String   @id
    code          String
    expiresAt     DateTime
    createdAt     DateTime? @default(now())
    attempts      Int?      @default(0) 
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    
  mobileNumber     String    
  mobileVerified   Boolean   @default(false)
  dynamicMediaUrls Json?
  active           Boolean   @default(true)
  language         String?
  notification     Json?
  rememberToken    String?
  referralCode     String?
  role             Role     
  // NEW: Link Vendor Staff to their Vendor
  vendorId         String?           // ID of the Vendor this staff user belongs to (null for customers/delivery_persons)
  vendor           Vendor?           @relation("VendorStaff", fields: [vendorId], references: [id], onDelete: SetNull)

  vendors          Vendor[]  @relation("Vendor")
  supportMessages  Support[] @relation("SupportMessages")
  orderShoppers    Order[] @relation("OrderShopper")
  orderDeliverers  Order[] @relation("OrderDeliverer")
  deliveryAddresses DeliveryAddress[]
  orders           Order[]
  carts            Cart[] 
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([mobileNumber, role])
}

model Product {
  id          String    @id @default(uuid())
  barcode     String    @unique
  name        String
  description String?
  images      String[]
  weight      Float?
  weightUnit  String?
  attributes  Json?
  meta        Json?
  vendorProducts     VendorProduct[]
  categoryIds String[]
  categories  Category[] 
  isAlcohol   Boolean  @default(false)
  isAgeRestricted Boolean  @default(false)
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VendorProduct {
  id            String    @id @default(uuid())
  vendor        Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId      String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  price         Float
  name          String
  description   String?
  discountedPrice Float?
  images        String[]
  weight      Float?
  weightUnit  String?
  stock         Int?
  isAvailable   Boolean   @default(true)
  isAlcohol   Boolean  @default(false)
  isAgeRestricted Boolean  @default(false)
  attributes    Json?
  categoryIds String[]
  categories  Category[]
  tags        Tag[]
  cartItems     CartItem[] //Opposite relation to CartItem
  orderItems    OrderItem[] //Opposite relation to OrderItem
  @@unique([vendorId, productId])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id         String    @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId String
  items      CartItem[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, vendorId]) // Ensure one cart per user-vendor pair
}

model CartItem {
  id              String    @id @default(uuid())
  cartId          String
  cart            Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  vendorProductId String
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id])
  quantity        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([cartId, vendorProductId])
}

model OrderItem {
  id              String        @id @default(uuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vendorProductId String
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id])
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

//extend the order model
model Order {
  id                  String    @id @default(uuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId            String // Add this field
  vendor              Vendor @relation(fields: [vendorId], references: [id])
  totalAmount         Float
  deliveryFee         Float?    // Add delivery fee
  serviceFee          Float?    // Platform service fee
  shoppingFee         Float?    // Fee for shopping in the store
  paymentMethod       PaymentMethods  @default(credit_card)  // e.g., "credit_card", "wallet", "cash"
  paymentStatus       PaymentStatus   @default(pending) // e.g., "pending", "paid", "failed"
  orderStatus         OrderStatus    @default(pending)// e.g., "pending", "processing", "shipped", "delivered", "cancelled"
  reasonForDecline    String?
  deliveryAddressId   String?         // ID of the DeliveryAddress used for this order (can be null if customer pickup or temporary address)
  deliveryAddress     DeliveryAddress? @relation(fields: [deliveryAddressId], references: [id])
  deliveryInstructions  String? // Customer's delivery instructions
  shoppingHandlerId   String?   // ID of the User handling the shopping (Role: SHOPPER)
  shopper             User?     @relation("OrderShopper", fields: [shoppingHandlerId], references: [id])
  deliveryHandlerId String?   // ID of the User handling the delivery (Role: DELIVERY)
  deliverer           User?     @relation("OrderDeliverer", fields: [deliveryHandlerId], references: [id])
  // NEW: Defines who is responsible for shopping/preparation
  shoppingMethod      ShoppingMethod? @default(vendor)
  // NEW: Defines how the order will be delivered to the customer
  deliveryMethod      DeliveryMethod? @default(customer_pickup)
  // When the shopping for the order is scheduled to start.
  // Orders with a future scheduledShoppingStartTime might not be visible to handlers yet.
  scheduledShoppingStartTime DateTime? @default(now())
  orderItems                 OrderItem[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model DeliveryAddress {
  id               String    @id @default(uuid())
  userId           String    // Links this address to a specific user
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Standard address components
  label            String?   // e.g., "Home", "Work", "Friend's House"
  addressLine1     String    // Street address, house number
  addressLine2     String?   // Apartment, suite, unit, building name
  city             String
  state            String?   // State/Province/Region
  postalCode       String?   // Zip/Postal Code
  country          String    @default("Nigeria") // Default or make configurable

  // Optional: For mapping and delivery optimization
  latitude         Float?
  longitude        Float?

  isDefault        Boolean   @default(false) // Flag if this is the user's preferred default address

  // Relation to Order: An address can be used for many orders
  orders           Order[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Ensures a user cannot have two default addresses (optional, but good for UX)
  @@unique([userId, isDefault])
  @@index([userId]) // Index for faster lookups by user
}

model Fee {
  id               String                 @id @default(uuid())
  type             FeeType                // Distinguishes between Delivery, Service, etc.
  amount           Float                  // The numerical value of the fee (e.g., 5.00, 0.05)
  method           FeeCalculationMethod   // How the 'amount' is interpreted (FLAT, PERCENTAGE, PER_UNIT, PER_DISTANCE)
  unit             String?                // Optional: Provides context for 'PER_UNIT' or 'PER_DISTANCE' (e.g., "item", "kg", "km", "mile")
  minThreshold     Float?                 // Optional: Minimum value for the fee to apply (e.g., minimum order value for a service fee)
  maxThreshold     Float?                 // Optional: Maximum value for the fee to apply
  thresholdAppliesTo String?              // Optional: Defines what the threshold relates to (e.g., "order_subtotal", "total_item_count", "distance_km")
  isActive         Boolean                @default(false) // True if this is the currently active fee for its type
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  @@unique([type, isActive]) // Ensures only one active fee per type at any given time
}



model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  imageUrl       String?
  description  String?
  parent   Category? @relation("Subcategories", fields: [parentId], references: [id])
  parentId String?
  children Category[]  @relation("Subcategories")
  products Product[]
  vendorProducts VendorProduct[]
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  vendorProducts VendorProduct[]
}

model Vendor {
  id               String     @id @default(uuid())
  user             User       @relation("Vendor", fields: [userId], references: [id], onDelete: Restrict)
  userId           String
  name             String
  email            String?
  tagline          String?
  details          String?
  image            String?
  address          String?
  longitude        Float?
  latitude         Float?
  timezone         String?  @default("America/New_York")// e.g., "Africa/Lagos", "America/New_York"
  isVerified       Boolean    @default(false)
  meta             Json?
  openingHours     VendorOpeningHours[] 
  carts           Cart[]  
  vendorProducts   VendorProduct[]
  orders           Order[]
  staff            User[]                 @relation("VendorStaff")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model VendorOpeningHours {
  id        String   @id @default(uuid())
  vendor    Vendor   @relation( fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId  String
  day       Days 
  open      String? 
  close     String? 
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@unique([vendorId, day]) // Add the unique constraint here
}


model Support {
  id        String    @id @default(uuid())
  user      User?       @relation("SupportMessages", fields: [userId], references: [id])
  userId    String?
  name      String
  email     String
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Setting {
  id        String    @id @default(uuid())
  key       String
  value     String
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


enum Role {
  admin
  vendor
  vendor_staff
  delivery
  customer
  shopper
}

enum Days {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}


enum PaymentMethods {
  credit_card
  wallet
  cash
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum OrderStatus {
  pending
  accepted_for_shopping
  declined_by_vendor
  cancelled_by_customer
  currently_shopping
  ready_for_delivery
  ready_for_pickup
  en_route
  delivered
}

// --- NEW ENUMS ---
enum ShoppingMethod {
  vendor        // The vendor prepares the order
  shopper       // A designated shopper (e.g., delivery person who also shops) prepares the order
}

enum DeliveryMethod {
  delivery_person // A designated delivery person delivers the order
  customer_pickup // The customer picks up the order
}

// Enum to define different types of fees
enum FeeType {
  delivery
  service
  shopping
}

enum FeeCalculationMethod {
  flat          // A fixed amount in currency (e.g., $5.00)
  percentage    // A percentage of a base value (e.g., 0.05 for 5% of subtotal)
  per_unit      // Per unit of an item (e.g., $1.00 per item, or $0.50 per kg)
  per_distance  // Per unit of distance (e.g., $2.00 per km)
}