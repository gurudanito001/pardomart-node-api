// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql, sqlite, etc. based on your actual database
  url      = env("DATABASE_URL")
}

model Verification {
    mobileNumber  String   @id
    code          String
    expiresAt     DateTime
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    
  mobileNumber     String    
  mobileVerified   Boolean   @default(false)
  dynamicMediaUrls Json?
  active           Boolean   @default(true)
  language         String?
  notification     Json?
  rememberToken    String?
  referralCode     String?
  role             Role     
  vendors          Vendor[]  @relation("Vendor")
  supportMessages  Support[] @relation("SupportMessages")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([mobileNumber, role])
}

model Product {
  id          String    @id @default(uuid())
  barcode     String    @unique
  name        String
  description String?
  images      String[]
  attributes  Json?
  meta        Json?
  vendorProducts     VendorProduct[]
  categoryIds String[]
  categories  Category[] 
  isAlcohol   Boolean  @default(false)
  isAgeRestricted Boolean  @default(false)
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VendorProduct {
  id            String    @id @default(uuid())
  vendor        Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId      String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  price         Float
  name          String
  description   String?
  discountedPrice Float?
  images        String[]
  stock         Int?
  isAvailable   Boolean   @default(true)
  isAlcohol   Boolean  @default(false)
  isAgeRestricted Boolean  @default(false)
  attributes    Json?
  categoryIds String[]
  categories  Category[]
  tags        Tag[]
  @@unique([vendorId, productId])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
  vendorProducts VendorProduct[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  vendorProducts VendorProduct[]
}

model Vendor {
  id               String     @id @default(uuid())
  user             User       @relation("Vendor", fields: [userId], references: [id], onDelete: Restrict)
  userId           String
  name             String
  email            String?
  tagline          String?
  details          String?
  image            String?
  address          String?
  longitude        Float?
  latitude         Float?
  isVerified       Boolean    @default(false)
  meta             Json?
  openingHours     VendorOpeningHours[] 
  vendorProducts   VendorProduct[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model VendorOpeningHours {
  id        String   @id @default(uuid())
  vendor    Vendor   @relation( fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId  String
  day       Days 
  open      String? 
  close     String? 
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@unique([vendorId, day]) // Add the unique constraint here
}


model Support {
  id        String    @id @default(uuid())
  user      User?       @relation("SupportMessages", fields: [userId], references: [id])
  userId    String?
  name      String
  email     String
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Setting {
  id        String    @id @default(uuid())
  key       String
  value     String
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


enum Role {
  admin
  vendor
  delivery
  customer
}

enum Days {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}